name: Build and upload to PyPI

on:
  pull_request:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ runner.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: ['x64']
        include:
          - os: macos-latest
            arch: ['arm64']
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        env:
          CIBW_ARCHS: "auto64"
          CIBW_SKIP: "pp* cp36-* cp37-* *musllinux* cp38-macosx_arm64"
          # CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest --pyargs nlsam --verbose
          CIBW_TEST_COMMAND_LINUX: >
            pytest --pyargs nlsam --verbose &&
            cd {package}/example &&
            chmod +x  {package}/nlsam/tests/test_scripts1.sh &&
            bash {package}/nlsam/tests/test_scripts1.sh &&
            chmod +x  {package}/nlsam/tests/test_scripts2.sh &&
            bash {package}/nlsam/tests/test_scripts2.sh

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  build_pyinstaller:
    name: Build pyinstaller on ${{ matrix.os }} ${{ runner.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        arch: ['x64']
        include:
          - os: macos-11
            arch: ['arm64']
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.10'

      - name: Get pyinstaller
        shell: bash
        run: |
          python -m pip install pyinstaller dask[distributed]
          python -m pip install .
          path=$(python -c "import distributed; print(distributed.__path__[0]);")
          echo "version=v$(python -c "from importlib.metadata import version; print(version('nlsam'));")" >> $GITHUB_ENV
          if [ "$RUNNER_OS" == "Windows" ]; then
            pyinstaller ./scripts/nlsam_denoising -F --clean --add-data "${path};.\\distributed\\" --noupx
          else
            pyinstaller ./scripts/nlsam_denoising -F --clean --add-data ${path}:./distributed/ --noupx
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: nlsam_${{ env.version }}_${{ runner.os }}_${{ runner.arch }}
          path: |
                CHANGELOG.md
                README.md
                LICENSE
                example/*
                ./dist/nlsam_denoising*
